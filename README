Two solutions to the Anagram challenge both implemented in JavaScript

Challenge: Given an array of strings return a hash table (JS object) listing words and the number of anagrams in the array

Way 1: Recursively compare strings to see if they are anagrams and then loop through the array n times to find the number of anagrams
Advantage: no need to sort strings
Disadvantage: need to loop through the array n times

Way 2: Sort strings and add them as keys to the hash if the key doesn't already exist and if it does exist add 1 to the value associated with it to keep track of the number of anagrams
Advantage: only loop through the array once
Disadvantage: need to sort strings 


Conclusion:
I tested the two algorithms on two sets of data, one had only 3 letter words and the other had words of varying lengths. 

For the set of 3 letter words, the recursive algorithm performed poorly compared to the mapping algorithm. On average the mapping algorithm took 7 milliseconds and the recursive algorithm took 19 milliseconds.

For the set of varying length words, the recursive algorithm performed better than the mapping algorithm. On average the mapping algorithm took 8 milliseconds and the recursive algorithm took 3 milliseconds.